// Generated by CoffeeScript 1.7.0
(function() {
  var Gamemode, Inventory, ItemPile;

  ItemPile = require('itempile');

  Inventory = require('inventory');

  module.exports = function(game, opts) {
    return new Gamemode(game, opts);
  };

  module.exports.pluginInfo = {
    loadAfter: ['voxel-mine', 'voxel-fly', 'voxel-registry', 'voxel-harvest', 'voxel-commands', 'voxel-keys']
  };

  Gamemode = (function() {
    function Gamemode(game, opts) {
      var _ref, _ref1, _ref2;
      this.game = game;
      if (!this.game.isClient) {
        return;
      }
      this.keys = (function() {
        if ((_ref = this.game.plugins.get('voxel-keys')) != null) {
          return _ref;
        } else {
          throw new Error('voxel-gamemode requires voxel-keys plugin');
        }
      }).call(this);
      this.mode = (_ref1 = opts.startMode) != null ? _ref1 : 'survival';
      this.registry = (function() {
        var _ref3;
        if ((_ref2 = (_ref3 = this.game.plugins) != null ? _ref3.get('voxel-registry') : void 0) != null) {
          return _ref2;
        } else {
          throw new Error('voxel-gamemode requires "voxel-registry" plugin');
        }
      }).call(this);
      this.enable();
    }

    Gamemode.prototype.enable = function() {
      var _ref, _ref1, _ref2, _ref3, _ref4;
      if ((_ref = this.game.plugins) != null) {
        if ((_ref1 = _ref.get('voxel-commands')) != null) {
          _ref1.registerCommand('creative', this.enterCreative.bind(this), '', 'enters creative mode');
        }
      }
      if ((_ref2 = this.game.plugins) != null) {
        if ((_ref3 = _ref2.get('voxel-commands')) != null) {
          _ref3.registerCommand('survival', this.enterSurvival.bind(this), '', 'enters survival mode');
        }
      }
      if (((_ref4 = this.game.plugins) != null ? _ref4.isEnabled('voxel-fly') : void 0) && this.mode === 'survival') {
        this.game.plugins.disable('voxel-fly');
      }
      return this.keys.down.on('inventory', this.onInventory = (function(_this) {
        return function() {
          var _ref5, _ref6;
          if (_this.mode === 'creative' && _this.game.plugins.isEnabled('voxel-inventory-creative')) {
            return (_ref5 = _this.game.plugins.get('voxel-inventory-creative')) != null ? _ref5.open() : void 0;
          } else {
            return (_ref6 = _this.game.plugins.get('voxel-inventory-crafting')) != null ? _ref6.open() : void 0;
          }
        };
      })(this));
    };

    Gamemode.prototype.enterCreative = function() {
      var _ref, _ref1, _ref2, _ref3;
      this.mode = 'creative';
      this.game.plugins.enable('voxel-fly');
      if ((_ref = this.game.plugins.get('voxel-mine')) != null) {
        _ref.instaMine = true;
      }
      if ((_ref1 = this.game.plugins.get('voxel-harvest')) != null) {
        _ref1.enableToolDamage = false;
      }
      console.log('Entered creative mode');
      return (_ref2 = this.game.plugins) != null ? (_ref3 = _ref2.get('voxel-console')) != null ? typeof _ref3.log === "function" ? _ref3.log('Entered creative mode') : void 0 : void 0 : void 0;
    };

    Gamemode.prototype.enterSurvival = function() {
      var _ref, _ref1, _ref2, _ref3;
      this.mode = 'survival';
      this.game.plugins.disable('voxel-fly');
      if ((_ref = this.game.plugins.get('voxel-mine')) != null) {
        _ref.instaMine = false;
      }
      if ((_ref1 = this.game.plugins.get('voxel-harvest')) != null) {
        _ref1.enableToolDamage = true;
      }
      console.log('Entered survival mode');
      return (_ref2 = this.game.plugins) != null ? (_ref3 = _ref2.get('voxel-console')) != null ? typeof _ref3.log === "function" ? _ref3.log('Entered survival mode') : void 0 : void 0 : void 0;
    };

    Gamemode.prototype.disable = function() {
      return this.keys.down.removeListener('inventory', this.onInventory);
    };

    return Gamemode;

  })();

}).call(this);
