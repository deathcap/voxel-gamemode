// Generated by CoffeeScript 1.7.0
(function() {
  var Gamemode, Inventory, ItemPile;

  ItemPile = require('itempile');

  Inventory = require('inventory');

  module.exports = function(game, opts) {
    return new Gamemode(game, opts);
  };

  module.exports.pluginInfo = {
    loadAfter: ['voxel-mine', 'voxel-fly', 'voxel-registry', 'voxel-harvest']
  };

  Gamemode = (function() {
    function Gamemode(game, opts) {
      var _ref, _ref1;
      this.game = game;
      if (!this.game.isClient) {
        return;
      }
      if (this.game.buttons.down == null) {
        throw new Error('voxel-gamemode requires game.buttons as kb-bindings (vs kb-controls), cannot add down event listener');
      }
      this.mode = (_ref = opts.startMode) != null ? _ref : 'survival';
      this.registry = (function() {
        var _ref2;
        if ((_ref1 = (_ref2 = this.game.plugins) != null ? _ref2.get('voxel-registry') : void 0) != null) {
          return _ref1;
        } else {
          throw new Error('voxel-gamemode requires "voxel-registry" plugin');
        }
      }).call(this);
      this.enable();
    }

    Gamemode.prototype.enable = function() {
      var _ref;
      if (((_ref = this.game.plugins) != null ? _ref.isEnabled('voxel-fly') : void 0) && this.mode === 'survival') {
        this.game.plugins.disable('voxel-fly');
      }
      this.game.buttons.down.on('gamemode', this.onDown = (function(_this) {
        return function() {
          var _ref1, _ref2, _ref3, _ref4;
          if (_this.mode === 'survival') {
            _this.mode = 'creative';
            _this.game.plugins.enable('voxel-fly');
            if ((_ref1 = _this.game.plugins.get('voxel-mine')) != null) {
              _ref1.instaMine = true;
            }
            if ((_ref2 = _this.game.plugins.get('voxel-harvest')) != null) {
              _ref2.enableToolDamage = false;
            }
            return console.log('creative mode');
          } else {
            _this.mode = 'survival';
            _this.game.plugins.disable('voxel-fly');
            if ((_ref3 = _this.game.plugins.get('voxel-mine')) != null) {
              _ref3.instaMine = false;
            }
            if ((_ref4 = _this.game.plugins.get('voxel-harvest')) != null) {
              _ref4.enableToolDamage = true;
            }
            return console.log('survival mode');
          }
        };
      })(this));
      return this.game.buttons.down.on('inventory', this.onInventory = (function(_this) {
        return function() {
          var _ref1, _ref2;
          if (_this.mode === 'creative' && _this.game.plugins.isEnabled('voxel-inventory-creative')) {
            return (_ref1 = _this.game.plugins.get('voxel-inventory-creative')) != null ? _ref1.open() : void 0;
          } else {
            return (_ref2 = _this.game.plugins.get('voxel-inventory-crafting')) != null ? _ref2.open() : void 0;
          }
        };
      })(this));
    };

    Gamemode.prototype.disable = function() {
      this.game.buttons.down.removeListener('gamemode', this.onDown);
      return this.game.buttons.down.removeListener('inventory', this.onInventory);
    };

    return Gamemode;

  })();

}).call(this);
